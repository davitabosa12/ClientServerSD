/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iotbroker.devices;

import iotpackage.IoTAction;
import iotpackage.LightDevice;
import iotpackage.Message;
import iotpackage.OnDeviceStateChange;
import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author davi
 */
public class LightFrame extends javax.swing.JFrame {

    /**
     * Creates new form LightFrame
     */
    private LightDevice light;
    public LightFrame() {
        initComponents();
        light = new LightDevice("Luz da sala", "Luz de led virtual para testes de IoT");
        light.setCallback(new OnDeviceStateChange() {
            @Override
            public void deviceStateChanged(boolean newValue) {
                if(newValue){
                    lblStatusLuz.setText("Ligado");
                    lblStatusLuz.setForeground(Color.GREEN);
                }
                else{
                    lblStatusLuz.setText("Desligado");
                    lblStatusLuz.setForeground(Color.red);
                }
            }
        });
        light.turnOn();
        
        Thread serverThread = new Thread(new Runnable() {
            @Override
            public void run() {
                serverStuff();
            }
        });
        
        serverThread.start();
        
    }
    private void serverStuff(){
        ServerSocket myServer;
        try {
            myServer = new ServerSocket(9090);
            System.out.println("Server on..");
        while(true){
            Socket gatewaySocket = myServer.accept();
            System.out.println("Connected");


            ObjectInputStream inFromGateway = null;
            ObjectOutputStream outToGateway = null;
            try {
                
                outToGateway = new ObjectOutputStream(gatewaySocket.getOutputStream());
                outToGateway.flush();
                inFromGateway = new ObjectInputStream(gatewaySocket.getInputStream());
            } catch (IOException ex) {
                Logger.getLogger(LightFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            while(!gatewaySocket.isClosed()){
                try {
                    if(inFromGateway != null || outToGateway != null)
                        waitForCommands(inFromGateway, outToGateway);
                } catch (IOException ex) {
                    gatewaySocket.close();
                    //Logger.getLogger(LightFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    //Logger.getLogger(LightFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
                
        }
        } catch (IOException ex) {
            Logger.getLogger(LightFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblStatusLuz = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 36)); // NOI18N
        jLabel1.setText("Luz");

        jLabel2.setText("Status: ");

        lblStatusLuz.setText("StatusLuz");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatusLuz)))
                .addContainerGap(175, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblStatusLuz))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    
    private void waitForCommands(ObjectInputStream in, ObjectOutputStream out) throws IOException, ClassNotFoundException {
        IoTAction action = (IoTAction) in.readObject();
            if(light.performAction(action, out) == false){
                out.writeObject(new Message(Message.ERROR,"Invalid action for this device"));
            }
            
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LightFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LightFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LightFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LightFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LightFrame().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblStatusLuz;
    // End of variables declaration//GEN-END:variables
}
